//Created by Joseph Phan
#include <Servo.h>

/*Alphabet
 * _ -- 0
 * A -- 1
 * B -- 2
 * C -- 3
 * D -- 4
 * E -- 5
 * F -- 6
 * G -- 7
 * H -- 8
 * I -- 9
 * J -- 10
 * K -- 11
 * L -- 12
 * M -- 13
 * N -- 14
 * O -- 15
 * P -- 16
 * Q -- 17
 * R -- 18
 * S -- 19
 * T -- 20
 * U -- 21
 * V -- 22
 * W -- 23
 * X -- 24
 * Y -- 25
 * Z -- 26
 * 0 -- 27 
 * 1 -- 28
 * 2 -- 29
 * 3 -- 30
 * 4 -- 31
 * 5 -- 32
 * 6 -- 33
 * 7 -- 34
 * 8 -- 35
 * 9 -- 36
 */

//Morse Code Arrays

int Code[37][5] = 
  {
    {1,1,1,1,1}, // _   Location 0
    {1,2,0,0,0}, // A   Location 1
    {2,1,1,1,0}, // B   Location 2
    {2,1,2,1,0}, // C   Location 3
    {2,1,1,0,0}, // D   Location 4
    {1,0,0,0,0}, // E   Location 5
    {1,1,2,1,0}, // F   Location 6
    {2,2,1,0,0}, // G   Location 7
    {1,1,1,1,0}, // H   Location 8
    {1,1,0,0,0}, // I   Location 9
    {1,2,2,2,0}, // J   Location 10
    {2,1,2,0,0}, // K   Location 11
    {1,2,1,1,0}, // L   Location 12
    {2,2,0,0,0}, // M   Location 13
    {2,1,0,0,0}, // N   Location 14
    {2,2,2,0,0}, // O   Location 15
    {1,2,2,1,0}, // P   Location 16
    {2,2,1,2,0}, // Q   Location 17
    {1,2,1,0,0}, // R   Location 18
    {1,1,1,0,0}, // S   Location 19
    {2,0,0,0,0}, // T   Location 20
    {1,1,2,0,0}, // U   Location 21
    {1,1,1,2,0}, // V   Location 22
    {1,2,2,0,0}, // W   Location 23
    {2,1,1,2,0}, // X   Location 24
    {2,1,2,2,0}, // Y   Location 25
    {2,2,1,1,0}, // Z   Location 26
    {2,2,2,2,2}, // 0   Location 27
    {1,2,2,2,2}, // 1   Location 28
    {1,1,2,2,2}, // 2   Location 29
    {1,1,1,2,2}, // 3   Location 30
    {1,1,1,1,1}, // 4   Location 31
    {1,1,1,1,1}, // 5   Location 32
    {2,1,1,1,1}, // 6   Location 33
    {2,2,1,1,1}, // 7   Location 34
    {2,2,2,1,1}, // 8   Location 35
    {2,2,2,2,1}, // 9   Location 36
  };

int Light[38][10] = 
{
  {3,13,12,11, 0, 0, 0, 0, 0, 0}, // _   Location 0
  {8,13,11,10, 9, 8, 7, 6, 5, 0}, // A   Location 1
  {7,13,12,10, 9, 7, 8,11, 0, 0}, // B   Location 2
  {7,13,12,11,10, 7, 6, 5, 0, 0}, // C   Location 3 
  {5,12,11, 9, 8, 5,13,10, 0, 0}, // D   Location 4
  {7,13,12,11,10, 9, 7, 6, 0, 0}, // E   Location 5
  {6,13,10, 9, 7, 6, 5, 0, 0, 0}, // F   Location 6
  {7,13,12,11,10, 8, 7, 6, 0, 0}, // G   Location 7
  {7,13,11,10, 9, 8, 7, 5, 0, 0}, // H   Location 8
  {7,13,12,11, 9, 7, 6, 5, 0, 0}, // I   Location 9
  {6,13,12, 9, 7, 6, 5, 0, 0, 0}, // J   Location 10
  {6,13,11,10, 9, 7, 5, 0, 0, 0}, // K   Location 11
  {5,13,12,11,10, 7, 0, 0, 0, 0}, // L   Location 12
  {6,13,12,11,10, 9, 8, 0, 0, 0}, // M   Location 13
  {4,12,11, 9, 8, 0, 0, 0, 0, 0}, // N   Location 14
  {8,13,12,11,10, 8, 7, 6, 5, 0}, // O   Location 15
  {7,13,10, 9, 8, 7, 6, 5, 0, 0}, // P   Location 16
  {7,13,12,11,10, 9, 7, 6, 0, 0}, // Q   Location 17
  {6,13,10, 8, 7, 6, 5, 0, 0, 0}, // R   Location 18
  {4,13,12, 9, 8, 0, 0 ,0 ,0, 0}, // S   Location 19
  {5,12, 9, 7, 6, 5, 0, 0, 0, 0}, // T   Location 20
  {7,13,12,11,10, 8, 7, 5, 0, 0}, // U   Location 21
  {5,12,10, 8, 7, 5, 0, 0, 0, 0}, // V   Location 22
  {8,13,12,11,10, 9, 8, 7, 5, 0}, // W   Location 23
  {5,13,11, 9, 7, 5, 0, 0, 0, 0}, // X   Location 24
  {4,12, 9, 7, 5, 0, 0, 0, 0, 0}, // Y   Location 25
  {3,12,11,10, 9, 0, 0, 0, 0, 0}, // Z   Location 26
  {6,12,11, 9, 8, 6, 5, 0, 0, 0}, // 0   Location 27
  {3,12, 9, 6, 0, 0, 0, 0, 0, 0}, // 1   Location 28
  {8,13,12,11, 9, 10, 7, 6, 5, 0}, // 2   Location 29
  {8,13,12,11, 9, 8, 7, 6, 5, 0}, // 3   Location 30
  {6,11,10, 9, 8, 7, 5, 0, 0, 0}, // 4   Location 31
  {7,13,12,10, 9, 7, 6, 5, 0, 0}, // 5   Location 32
  {5,13,12,10, 9, 7, 0, 0, 0, 0}, // 6   Location 33
  {5,13, 9, 7, 6, 5, 0, 0, 0, 0}, // 7   Location 34
  {6,13,12,10, 9, 7, 6, 0, 0, 0}, // 8   Location 35
  {5,11, 9, 8, 6, 5, 0, 0, 0, 0}, // 9   Location 36
  {9,13,12,11,10, 9, 8, 7, 6, 5}, // Err Location 37
};


//initialize Pins
int displayLight[9] = {13,12,11,10,9,8,7,6,5};
int morseButton = 2;
int completeButton = 3;
Servo servo1;

//variable used
int completeState =0;
int morseState = 0;
int longPress;
int morseArray[] = {0,0,0,0,0};
int pos = 0;
int counter;
int letterFound;
int startup = 1;

void setup() {
   for (int i=0; i<9; i++){
      pinMode(displayLight[i],OUTPUT);
   }
//   pinMode(movLight, OUTPUT);
   pinMode(morseButton, INPUT);
   pinMode(completeButton, INPUT);
   servo1.attach(4);
   servo1.write(0);
   Serial.begin(9600);
}

//Runtime: O(n^2)
void loop() {
    // Turn on machine
    if(startup == 1){
      TurnOn();
      startup = 0;
    }
    
    //Gathers Input Data
    for (int i=0; i<5; i++){
       if(retreiveMorseCode(morseArray,pos) == -1){
        delay(2500);
        break;
       }
       pos++;
    }
    pos = 0;    
    printArray(morseArray);

    letterFound = findLetter(morseArray);
    turnOffLights();
    displayLetter(letterFound);
    resetArray(morseArray);
    

}

//Function Description: shows to user that product is on. should blink all lights 3 times.
void TurnOn(){
  for(int i=0; i<3; i++){
    for(int j=0; j<9; j++){
      digitalWrite(displayLight[j],HIGH);
    }
    delay(250);
    for(int j=0; j<9; j++){
      digitalWrite(displayLight[j],LOW);
    }
    delay(250);
  }
  
}
//display motor for short press
void servoShortPress(){
  Serial.println(" button pressed");
  servo1.write(90);
  delay(1000);

}
//display motor for long press
void servoLongPress(){
  servo1.write(180);
  delay(1000);
}
//set motor to 0
void servoReset(){
  servo1.write(0);
  delay(1000);
}

/*
 * Function Description: Takes in input from button and records it in an array.
 * Long press is wheen user holds down for 2.5seconds or more
 * short press is when user holds down for less than 2.5 seconds
 */
int retreiveMorseCode(int morseArray[],int pos){
  while(true){
    delay(250);
    morseState = digitalRead(morseButton); //checks when morse code button is pressed
    Serial.println("morsestate"); 
    Serial.println(morseState);
    if(morseState == 0){
      break;
    }
    completeState = digitalRead(completeButton); //checks if the complete button is pressed
    if(completeState == 0){
      Serial.println("complete button pressed");
      return -1;
    }
  }
    while(true){
         delay(250);
         longPress = digitalRead(morseButton); 
         Serial.println("longPress");
         Serial.println(longPress);
         if (longPress == 0){ //checks if press was short or long
            counter++;
            Serial.println(counter);
            if (counter==1){
               servoShortPress();
            }else if(counter==3){
              servoLongPress();
            }
         }else {
            if(counter>=3){
            counter=0;
            morseArray[pos] = 2;
            Serial.println("longpresshappened");  
            //servoLongPress();
            servoReset();
            return 0;
            }
            else{
            counter=0;
            morseArray[pos] = 1;
            Serial.println("shortpresshappened");
            //servoShortPress();
            servoReset(); 
            return 0;
            }
         }
    }
    return 0;
}

//Function Description: Determines the symbol/location of symbol by comparing arrays
int findLetter(int morseArray[]){
  int check = 0;
  for(int i=0; i<37; i++){ 
    for(int j=0; j<5; j++){
      if (Code[i][j] == morseArray[j]){
        check++;
        if(check==5){
          Serial.println("LETTER FOUND AT");
          Serial.println(i);
          return i;
        }
      }else{
        check=0;
        j=5;
      } 
    }
  }
  Serial.println("LETTER NOT FOUND");
  return 37; //Could not find a match
}

//Function Description: resets all elements of the array back to 0
void resetArray(int morseArray[]){
  for (int i=0; i<5; i++){
    morseArray[i]=0;
  }
}

//Function Description:Turns on the light according to the corresponding letter
void displayLetter(int x){
  int numElement = Light[x][0];
  Serial.println("numElement");
  Serial.println(numElement);
  for(int i=1; i<=numElement; i++){
    digitalWrite(Light[x][i], HIGH);
    Serial.println("displaying Light");
    Serial.println(Light[x][i]);
  }
}

//Function Description: Turns off all the lights
void turnOffLights(){
  for (int i=0; i<13; i++){
    digitalWrite(displayLight[i],LOW);
  }
}

//Function Description: prints morse array. made for debugging purposes
void printArray(int morseArray[]){
    for(int i=0; i<5; i++){
       Serial.println("morsearrary value is");
       Serial.println(morseArray[i]);
    }
}
